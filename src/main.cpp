#include "inc.hpp"
#include "ngdec.hpp"

using namespace CryptoPP;

NG::ArxanKey g_decKey            = { 0xb1, 0x51, 0x81, 0x7b, 0xcc, 0xa7, 0xed, 0xae, 0x23, 0xa8, 0x6d, 0x03, 0x8b, 0x7e, 0x43, 0x2f, 0x5b, 0xc9, 0xfe, 0xe0, 0xe0, 0x50, 0xaa, 0x69, 0xc0, 0x78, 0x74, 0x72, 0xa2, 0x35, 0xda, 0xf3, 0x6c, 0x5d, 0x08, 0xb5, 0xdf, 0x81, 0x44, 0xfc, 0xbe, 0x36, 0xd5, 0xc7, 0xd5, 0x4e, 0x34, 0x54, 0xf5, 0x67, 0xab, 0x6e, 0xc4, 0x10, 0x4c, 0x1b, 0x40, 0x10, 0x98, 0x4c, 0xeb, 0x22, 0xa3, 0x4c, 0x26, 0x59, 0xa1, 0x11, 0x44, 0x42, 0x78, 0xd5, 0x4b, 0x49, 0x98, 0x22, 0xe6, 0xe8, 0xd1, 0xcd, 0xda, 0xd4, 0x74, 0x43, 0x34, 0x17, 0x07, 0x59, 0x4e, 0x01, 0xee, 0x83, 0x45, 0x71, 0x4b, 0x6e, 0x2c, 0xba, 0xeb, 0x29, 0xfe, 0x21, 0xc1, 0x4d, 0x4e, 0x3a, 0xaf, 0xa7, 0xd6, 0x9a, 0xcc, 0xe5, 0x1b, 0xba, 0x06, 0xc7, 0x5c, 0xdf, 0x69, 0x56, 0x0d, 0x40, 0x54, 0x0c, 0xef, 0x20, 0xb3, 0x7e, 0xa4, 0xd1, 0x83, 0x78, 0x81, 0x8d, 0x40, 0xf9, 0x39, 0x51, 0xf8, 0xe9, 0xc0, 0x47, 0x11, 0x36, 0x2c, 0x20, 0xdb, 0x91, 0xb3, 0x00, 0xc1, 0x13, 0xf2, 0xea, 0x74, 0xca, 0xda, 0x0f, 0x04, 0x51, 0xa7, 0x34, 0xeb, 0x3d, 0x68, 0x70, 0x2c, 0x70, 0x23, 0x19, 0xff, 0xa3, 0x36, 0x1b, 0x57, 0x5c, 0x5a, 0xdf, 0x54, 0x19, 0x7b, 0x75, 0xc3, 0xf5, 0xb0, 0x1e, 0x5d, 0xae, 0x2a, 0xb6, 0xf0, 0x7a, 0x24, 0x9b, 0xcc, 0x57, 0xce, 0xd1, 0x98, 0xce, 0xd4, 0xf0, 0xd7, 0xd8, 0x1d, 0x9e, 0x82, 0xef, 0x70, 0x16, 0xa4, 0xf8, 0x2c, 0x7c, 0x62, 0x99, 0xa3, 0xe9, 0x72, 0x4b, 0xa8, 0xfa, 0x65, 0x17, 0x91, 0x0e, 0x66, 0x5e, 0x76, 0xdb, 0xa2, 0x63, 0xbe, 0xdb, 0xb4, 0x5c, 0x68, 0x10, 0x6c, 0x8d, 0xe0, 0xac, 0x6e, 0x23, 0x8a, 0x2e, 0xe3, 0x19, 0x80, 0x8a, 0xee, 0xbb, 0xc7, 0xeb, 0x2f, 0xf9, 0x45, 0x73, 0x26, 0x12, 0x61, 0xf3, 0xb9, 0x08, 0x14, 0x0e, 0x0b, 0xc9, 0xa3, 0x15, 0x2f, 0x51 };
NG::ArxanKey g_integrityCheckKey = { 0xb1, 0x51, 0x81, 0x7b, 0xcc, 0xa7, 0xed, 0xae, 0x23, 0xa8, 0x6d, 0x03, 0x8b, 0x7e, 0x43, 0x2f, 0x9c, 0xa7, 0x06, 0x1a, 0xf8, 0xe9, 0x4e, 0x9c, 0x12, 0xf4, 0x42, 0xc5, 0x73, 0x5e, 0x3e, 0xb6, 0xaa, 0xba, 0xc8, 0xc3, 0xa9, 0x85, 0xe7, 0x78, 0xb8, 0x20, 0x99, 0x16, 0x39, 0xba, 0xfa, 0x6e, 0xd4, 0x5c, 0xd6, 0x8a, 0xf7, 0xef, 0x66, 0x85, 0x23, 0x20, 0xfe, 0x4b, 0x6f, 0x61, 0xe7, 0xb2, 0xbd, 0xed, 0x1d, 0xcf, 0xf4, 0xa1, 0x1b, 0x27, 0x3b, 0x5b, 0x77, 0x77, 0x0c, 0x0a, 0x53, 0x26, 0x15, 0x47, 0x37, 0x35, 0x26, 0xd3, 0x50, 0x23, 0x1e, 0xce, 0xa2, 0x1a, 0xa2, 0x02, 0x69, 0x97, 0xd4, 0x0f, 0x40, 0x81, 0xd5, 0x76, 0x1e, 0x61, 0x8e, 0xcb, 0x23, 0x00, 0x4c, 0x6a, 0xa1, 0x5b, 0x26, 0x63, 0xf0, 0x34, 0x81, 0x88, 0x7d, 0x5a, 0x4f, 0x4b, 0x4f, 0xef, 0x58, 0x9c, 0xdd, 0x1e, 0x88, 0x66, 0x41, 0x8d, 0x52, 0x6f, 0x34, 0x7d, 0xd2, 0xf7, 0xab, 0x62, 0x9a, 0x46, 0xf0, 0x2f, 0x6f, 0x50, 0x42, 0x98, 0x53, 0x8e, 0x23, 0xec, 0x6d, 0xb6, 0x7b, 0x25, 0x2f, 0xb8, 0x71, 0xd2, 0x7e, 0x8c, 0x34, 0x54, 0x97, 0x25, 0x9a, 0x01, 0x1b, 0x5d, 0xd8, 0xac, 0x87, 0xbc, 0xe5, 0xce, 0x5b, 0xc9, 0x62, 0x60, 0xd8, 0x8b, 0xb8, 0x03, 0xcf, 0xcc, 0xb0, 0xbe, 0x40, 0x5d, 0x8a, 0x16, 0x7a, 0xd7, 0x48, 0x50, 0xe8, 0x3c, 0xf1, 0xd6, 0x13, 0xe1, 0x46, 0xa6, 0x94, 0x7d, 0x17, 0x72, 0x09, 0x24, 0xb8, 0x29, 0x8e, 0x94, 0x2f, 0x16, 0x7f, 0xc5, 0xe4, 0xad, 0xbd, 0xc3, 0xf2, 0x6b, 0x8c, 0x84, 0xd9, 0x1c, 0x0e, 0x7a, 0x4f, 0x7c, 0x5f, 0x27, 0x4c, 0x3a, 0x26, 0xe2, 0x68, 0x6e, 0xe0, 0xac, 0x6e, 0x23, 0x8a, 0x2e, 0xe3, 0x19, 0x80, 0x8a, 0xee, 0xbb, 0xc7, 0xeb, 0x2f, 0xf9, 0x6f, 0x51, 0x8c, 0x9e, 0x9f, 0xa6, 0x63, 0x06, 0x00, 0x18, 0xa1, 0x9b, 0xf6, 0xcf, 0x24, 0x3f };
NG::ArxanKey g_rtmaKey           = { 0xb1, 0x51, 0x81, 0x7b, 0xcc, 0xa7, 0xed, 0xae, 0x23, 0xa8, 0x6d, 0x03, 0x8b, 0x7e, 0x43, 0x2f, 0x1c, 0xd0, 0x36, 0x00, 0xb0, 0x49, 0xfc, 0xd1, 0xa7, 0xc4, 0x01, 0xe0, 0x86, 0x0f, 0x08, 0x64, 0xa2, 0xf1, 0x9b, 0x0f, 0x40, 0xdd, 0xf9, 0xda, 0x27, 0x3d, 0x73, 0x98, 0x7d, 0xdc, 0xc9, 0xa2, 0xb5, 0xe2, 0xec, 0x79, 0x81, 0xec, 0x72, 0x22, 0x7c, 0x10, 0xa6, 0x8c, 0x4e, 0xd3, 0x76, 0x95, 0x40, 0xa9, 0x1f, 0x45, 0x15, 0xb2, 0x56, 0x49, 0x4d, 0x1e, 0x83, 0x5b, 0xd7, 0x71, 0x8a, 0x64, 0x02, 0x61, 0x3d, 0x51, 0x31, 0x6e, 0x7e, 0x77, 0x37, 0xfd, 0xee, 0x7a, 0xdc, 0x80, 0xa0, 0x77, 0xff, 0xb3, 0x74, 0x60, 0xc9, 0x21, 0x51, 0x85, 0x19, 0x9d, 0x9a, 0x42, 0xe1, 0x54, 0x8c, 0x35, 0xd4, 0xa5, 0x2a, 0x68, 0x81, 0x13, 0x59, 0x6a, 0x71, 0xc5, 0x2d, 0xdb, 0x0f, 0x2d, 0x58, 0x9e, 0x27, 0x76, 0x71, 0x28, 0x65, 0x84, 0x4f, 0x78, 0x59, 0xf6, 0x5d, 0xc4, 0xa0, 0x2e, 0x64, 0x03, 0x7d, 0xf5, 0xf4, 0xcc, 0xa1, 0xd3, 0xdd, 0x80, 0x53, 0xa3, 0x3d, 0x21, 0x46, 0x87, 0x96, 0x66, 0xbe, 0x45, 0xd3, 0xb5, 0x0f, 0xde, 0xd1, 0xa1, 0xa7, 0xb7, 0x55, 0x0f, 0x36, 0xd5, 0x87, 0x44, 0xc4, 0x67, 0xaf, 0xa7, 0x38, 0x73, 0xf0, 0x3b, 0x03, 0x84, 0x08, 0xd6, 0x17, 0x77, 0x2b, 0xa6, 0x57, 0x5e, 0x14, 0x55, 0xb0, 0x0e, 0x5d, 0x97, 0x37, 0xf0, 0x80, 0xa5, 0x99, 0xfe, 0xf8, 0x5b, 0xd7, 0x42, 0x88, 0xb0, 0xf1, 0xc2, 0xaa, 0xe9, 0x53, 0x75, 0x14, 0xfd, 0x26, 0xa1, 0xeb, 0xb3, 0xf3, 0x42, 0x0f, 0xe3, 0x7b, 0xc1, 0xbf, 0x38, 0x23, 0x04, 0x26, 0x78, 0x0f, 0x70, 0x41, 0x44, 0xe0, 0xac, 0x6e, 0x23, 0x8a, 0x2e, 0xe3, 0x19, 0x80, 0x8a, 0xee, 0xbb, 0xc7, 0xeb, 0x2f, 0xf9, 0x00, 0x5c, 0xb3, 0x08, 0xdf, 0xd4, 0xdd, 0xfa, 0x34, 0xa6, 0x83, 0xb3, 0x49, 0x9b, 0xd5, 0x6f };

struct Signature
{
    uint8_t m_firstByte;
    uint8_t m_len;
    uint32_t m_pageLow;
    uint32_t m_pageHigh;
    uint32_t m_hash;
    uint32_t m_protectionFlags;
    uint32_t m_moduleSize;
};

std::vector<Signature> g_rtmaSigs;
std::vector<Signature> g_integrityChecks;

std::string DownloadTunables()
{
    cpr::Response r = cpr::Get(cpr::Url{ "http://prod.cloud.rockstargames.com/titles/gta5/pcros/0x1a098062.json" });
    uint8_t key[] = { 0xf0, 0x6f, 0x12, 0xf4, 0x9b, 0x84, 0x3d, 0xad, 0xe4, 0xa7, 0xbe, 0x05, 0x35, 0x05, 0xb1, 0x9c, 0x9e, 0x41, 0x5c, 0x95, 0xd9, 0x37, 0x53, 0x45, 0x0a, 0x26, 0x91, 0x44, 0xd5, 0x9a, 0x01, 0x15 };
    ECB_Mode<AES>::Decryption e;
    e.SetKey(key, 32);
    ArraySource(reinterpret_cast<uint8_t*>(r.text.data()), r.text.size() - (r.text.size() % 16), true,
        new StreamTransformationFilter(e,
        new ArraySink(reinterpret_cast<uint8_t*>(r.text.data()), r.text.size() - (r.text.size() % 16)),
        BlockPaddingSchemeDef::NO_PADDING)
    );
    return r.text;
}

std::vector<uint8_t> DecodeString(const std::string& data)
{
    std::vector<uint8_t> out;
    StringSource(data, true,
        new Base64Decoder(new VectorSink(out))
    );
    return out;
}


std::vector<uint8_t> GetAnticheatData()
{
    std::string data = DownloadTunables();
    rapidjson::Document d;
    d.Parse(data);

    if(!d.HasMember("tunables"))
        return {};
    if(!d["tunables"].HasMember("8B7D3320"))
        return {};
    if(!d["tunables"]["8B7D3320"].IsArray())
        return {};
    if(!d["tunables"]["8B7D3320"][0].HasMember("value"))
        return {};

    return DecodeString(d["tunables"]["8B7D3320"][0]["value"].GetString());
}

uint32_t FNV1a(const uint8_t* input, uint32_t size)
{
    uint32_t hash = 0x811C9DC5;
    for(uint32_t i = 0; i < size; i++)
    {
        hash = 0x1000193 * (input[i] ^ hash);
    }
    return hash;
}

const uint8_t* ScanBuffer(const uint8_t* data, size_t size, const Signature& sig)
{
    for(const uint8_t* ptr = data; ptr < data + size - sig.m_len; ptr++)
    {
        if(*ptr != sig.m_firstByte)
            continue;
        if(FNV1a(ptr, sig.m_len) == sig.m_hash)
            return ptr;
    }
    return 0;
}

bool IsAscii(const uint8_t* start, uint32_t size)
{
    return !std::any_of(start, start + size, [](uint8_t c) { return c > 127; });
}

void CheckFile(const uint8_t* data, size_t size, std::filesystem::path filePath)
{
    for(const Signature& signature : g_rtmaSigs)
    {
        if(const uint8_t* location = ScanBuffer(data, size, signature))
        {
            if(IsAscii(location, signature.m_len))
                fmt::print("[RTMA] ({}) (~{:.2f}kb) ({:x}-{:x}) \"{}\" ({:d})\n", filePath.filename().string(), (signature.m_moduleSize * 4096) / 1000.f, signature.m_pageLow * 4096, signature.m_pageHigh * 4096, std::string(reinterpret_cast<const char*>(location), signature.m_len), signature.m_len);
            else
            {
                fmt::print("[RTMA] ({}) (~{:.2f}kb) ({:x}-{:x}) {{ ", filePath.filename().string(), (signature.m_moduleSize * 4096) / 1000.f, signature.m_pageLow * 4096, signature.m_pageHigh * 4096);
                for(const uint8_t* i = location; i < location + signature.m_len; i++)
                {
                    fmt::print("{:02x} ", *i);
                }
                fmt::print("}} ({:d})\n", signature.m_len);
            }
        }
    }

    for(const Signature& signature : g_integrityChecks) // These will scan in the GTA Dump.
    {
        if(const uint8_t* location = ScanBuffer(data, size, signature))
        {
            if(IsAscii(location, signature.m_len))
                fmt::print("[IntegrityCheck] ({}) ({:x}-{:x}) \"{}\" ({:d})\n", filePath.filename().string(), signature.m_pageLow * 4096, signature.m_pageHigh * 4096, std::string_view(reinterpret_cast<const char*>(location), signature.m_len), signature.m_len);
            else
            {
                fmt::print("[IntegrityCheck] ({}) ({:x}-{:x}) {{ ", filePath.filename().string(), signature.m_pageLow * 4096, signature.m_pageHigh * 4096);
                for(const uint8_t* i = location; i < location + signature.m_len; i++)
                {
                    fmt::print("{:02x} ", *i);
                }
                fmt::print("}} ({:d})\n", signature.m_len);
            }
        }
    }
}

void ProcessSigs(const std::vector<uint8_t>& acData)
{
    for(int i = 8; i + 0x21 < acData.size(); i += 0x20)
    {
        switch(acData[i++])
        {
            case 0x12:
            {
                std::vector<uint8_t> signatureStruct = NG::DecryptNG(std::vector<uint8_t>(acData.begin() + i, acData.begin() + i + 0x20), g_rtmaKey);
                g_rtmaSigs.push_back({ signatureStruct[0], signatureStruct[1], *reinterpret_cast<uint32_t*>(signatureStruct.data() + 2), *reinterpret_cast<uint32_t*>(signatureStruct.data() + 6), *reinterpret_cast<uint32_t*>(signatureStruct.data() + 0x12), *reinterpret_cast<uint32_t*>(signatureStruct.data() + 0xA), *reinterpret_cast<uint32_t*>(signatureStruct.data() + 0xE) });
                break;
            }
            case 0x92:
            {
                std::vector<uint8_t> signatureStruct = NG::DecryptNG(std::vector<uint8_t>(acData.begin() + i, acData.begin() + i + 0x20), g_integrityCheckKey);
                g_integrityChecks.push_back({ signatureStruct[0], signatureStruct[1], *reinterpret_cast<uint32_t*>(signatureStruct.data() + 2), *reinterpret_cast<uint32_t*>(signatureStruct.data() + 6), *reinterpret_cast<uint32_t*>(signatureStruct.data() + 0xA), 0});
                break;
            }
            default:
                return;
        }
    }
}

int main(int argc, const char* args[])
{
    std::vector<uint8_t> data = GetAnticheatData();
    if(data.empty() || data.size() < 8)
    {
        fmt::print("Download failed\n");
        return 0;
    }
    //std::vector<uint8_t> data = DecodeString("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");
    data = NG::DecryptNG(data, g_decKey);
    ProcessSigs(data);
    fmt::print("Game build: {}\n", *reinterpret_cast<uint32_t*>(data.data()));
    fmt::print("{} sigs loaded\n", g_rtmaSigs.size() + g_integrityChecks.size());

    if(argc == 1)
    {
        for(const std::filesystem::directory_entry& entry : std::filesystem::recursive_directory_iterator("./files/"))
        {
            //fmt::print("Checking {}\n", entry.path().filename().string().c_str());
            std::ifstream i(entry.path(), std::ios::binary);
            std::vector<uint8_t> contents((std::istreambuf_iterator<char>(i)), std::istreambuf_iterator<char>());
            CheckFile(contents.data(), contents.size(), entry.path());
        }
    }
    else if (argc >= 2)
    {
        std::ifstream i(args[1], std::ios::binary);
        std::vector<uint8_t> contents((std::istreambuf_iterator<char>(i)), std::istreambuf_iterator<char>());
        CheckFile(contents.data(), contents.size(), args[1]);
    }

    return 0;
}